/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package thebarbershop.Jframe;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import javax.swing.JOptionPane;
import thebarbershop.utilidades.BarberoDAO;
import thebarbershop.Barbero;
import thebarbershop.utilidades.*;
import javax.swing.*;
/**
 *
 * @author jaelj
 */
public class MenuBarbero extends javax.swing.JFrame {
    private final String emailUsuario; //a esta variable le llamamos modificaciones de lugar.
    /**
     * Creates new form MenuBarbero
     * @param email
     */
    public MenuBarbero(String email) {
        this.emailUsuario = email;
        initComponents();
        setLocationRelativeTo(null);
        cargarDatosIniciales();
        
        // Asegurar visibilidad y habilitar men√∫s
        jVerCitas.setVisible(true);
        jMenuOpcion.setVisible(true);
        jMiPerfil.setEnabled(true);
        jPortafolio.setEnabled(true);
        jSalir.setEnabled(true);
        jAyuda.setEnabled(true);
        jTPdescripcion.setEditable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        JLtitulo = new javax.swing.JLabel();
        iconBarber = new javax.swing.JLabel();
        IconBarber2 = new javax.swing.JLabel();
        JLresumendeactividad = new javax.swing.JLabel();
        JSPresumenActividad = new javax.swing.JScrollPane();
        JLestilosdisp = new javax.swing.JLabel();
        chkAM = new javax.swing.JCheckBox();
        chkPM = new javax.swing.JCheckBox();
        JComboEstilosdisp = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTPdescripcion = new javax.swing.JTextPane();
        chkFinSemana = new javax.swing.JCheckBox();
        chkLunesAViernes = new javax.swing.JCheckBox();
        JLhorarios = new javax.swing.JLabel();
        JcomboHorarios = new javax.swing.JComboBox<>();
        JBguardar = new javax.swing.JButton();
        JLfondo = new javax.swing.JLabel();
        jMenuOpcion = new javax.swing.JMenuBar();
        jMiPerfil = new javax.swing.JMenu();
        jPerfil = new javax.swing.JMenu();
        Jperfil = new javax.swing.JMenuItem();
        jVerCitas = new javax.swing.JMenu();
        jCitasVistas = new javax.swing.JMenuItem();
        jPortafolio = new javax.swing.JMenu();
        jPortafolioFoto = new javax.swing.JMenu();
        Jportafolio = new javax.swing.JMenuItem();
        jSalir = new javax.swing.JMenu();
        jCerrar = new javax.swing.JMenu();
        Jcerrar = new javax.swing.JMenuItem();
        jAyuda = new javax.swing.JMenu();
        jAcercaDe = new javax.swing.JMenu();
        JacercaDe = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("TheBarberShop - Panel Barbero ");
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        JLtitulo.setFont(new java.awt.Font("Copperplate Gothic Bold", 0, 36)); // NOI18N
        JLtitulo.setForeground(new java.awt.Color(255, 255, 255));
        JLtitulo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        JLtitulo.setText("NOMBRE BARBERIA");
        jPanel1.add(JLtitulo, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 20, 520, 50));

        iconBarber.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/images/peluqueria(1).png"))); // NOI18N
        jPanel1.add(iconBarber, new org.netbeans.lib.awtextra.AbsoluteConstraints(840, 10, 60, 70));

        IconBarber2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/images/peluqueria(1).png"))); // NOI18N
        jPanel1.add(IconBarber2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, 60, 70));

        JLresumendeactividad.setFont(new java.awt.Font("Copperplate Gothic Light", 1, 18)); // NOI18N
        JLresumendeactividad.setForeground(new java.awt.Color(255, 255, 255));
        JLresumendeactividad.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        JLresumendeactividad.setText("Resumen de Actividad:");
        jPanel1.add(JLresumendeactividad, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 80, 240, 30));
        jPanel1.add(JSPresumenActividad, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 120, 320, 340));

        JLestilosdisp.setFont(new java.awt.Font("Copperplate Gothic Light", 1, 18)); // NOI18N
        JLestilosdisp.setForeground(new java.awt.Color(255, 255, 255));
        JLestilosdisp.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        JLestilosdisp.setText("Estilos disponibles:");
        jPanel1.add(JLestilosdisp, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 120, 230, 30));

        chkAM.setForeground(new java.awt.Color(255, 255, 255));
        chkAM.setText("A.M.");
        chkAM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkAMActionPerformed(evt);
            }
        });
        jPanel1.add(chkAM, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 280, -1, -1));

        chkPM.setForeground(new java.awt.Color(255, 255, 255));
        chkPM.setText("P.M.");
        chkPM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkPMActionPerformed(evt);
            }
        });
        jPanel1.add(chkPM, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 310, -1, -1));

        JComboEstilosdisp.setBackground(new java.awt.Color(51, 51, 51));
        JComboEstilosdisp.setFont(new java.awt.Font("Copperplate Gothic Light", 0, 14)); // NOI18N
        JComboEstilosdisp.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Agregar estilos....", "Taper Fade", "Low Fade", "Mid Fade", "High Fade", "Skin Fade", "Drop Fade" }));
        JComboEstilosdisp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JComboEstilosdispActionPerformed(evt);
            }
        });
        jPanel1.add(JComboEstilosdisp, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 150, 230, 60));

        jScrollPane1.setEnabled(false);
        jScrollPane1.setViewportView(jTPdescripcion);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 120, 250, 140));

        chkFinSemana.setForeground(new java.awt.Color(255, 255, 255));
        chkFinSemana.setText("FIN DE SEMANA");
        chkFinSemana.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkFinSemanaActionPerformed(evt);
            }
        });
        jPanel1.add(chkFinSemana, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 360, -1, -1));

        chkLunesAViernes.setForeground(new java.awt.Color(255, 255, 255));
        chkLunesAViernes.setText("LUNES A VIERNES");
        chkLunesAViernes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkLunesAViernesActionPerformed(evt);
            }
        });
        jPanel1.add(chkLunesAViernes, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 360, -1, -1));

        JLhorarios.setFont(new java.awt.Font("Copperplate Gothic Light", 1, 18)); // NOI18N
        JLhorarios.setForeground(new java.awt.Color(255, 255, 255));
        JLhorarios.setText("Horarios disponibles");
        jPanel1.add(JLhorarios, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 250, 230, 30));

        JcomboHorarios.setBackground(new java.awt.Color(51, 51, 51));
        JcomboHorarios.setFont(new java.awt.Font("Copperplate Gothic Light", 0, 14)); // NOI18N
        JcomboHorarios.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Agregue horarios..." }));
        JcomboHorarios.setPreferredSize(new java.awt.Dimension(180, 23));
        jPanel1.add(JcomboHorarios, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 280, 230, 60));

        JBguardar.setBackground(new java.awt.Color(13, 73, 11));
        JBguardar.setFont(new java.awt.Font("Copperplate Gothic Light", 1, 18)); // NOI18N
        JBguardar.setForeground(new java.awt.Color(255, 255, 255));
        JBguardar.setText("Guardar");
        JBguardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JBguardarActionPerformed(evt);
            }
        });
        jPanel1.add(JBguardar, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 410, 210, 50));

        JLfondo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/images/imagen10(1).jpg"))); // NOI18N
        jPanel1.add(JLfondo, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 920, 500));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 920, 500));
        jPanel1.getAccessibleContext().setAccessibleName("");

        jMenuOpcion.setBackground(new java.awt.Color(51, 51, 51));
        jMenuOpcion.setForeground(new java.awt.Color(255, 255, 255));
        jMenuOpcion.setFont(new java.awt.Font("Copperplate Gothic Light", 0, 12)); // NOI18N

        jMiPerfil.setText("mi perfil");
        jMiPerfil.setFont(new java.awt.Font("Copperplate Gothic Light", 3, 12)); // NOI18N
        jMiPerfil.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMiPerfilActionPerformed(evt);
            }
        });

        jPerfil.setText("Perfil");
        jPerfil.setFont(new java.awt.Font("Copperplate Gothic Light", 0, 12)); // NOI18N
        jPerfil.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jPerfilActionPerformed(evt);
            }
        });

        Jperfil.setFont(new java.awt.Font("Copperplate Gothic Light", 0, 12)); // NOI18N
        Jperfil.setLabel("Perfil");
        Jperfil.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JperfilActionPerformed(evt);
            }
        });
        jPerfil.add(Jperfil);

        jMiPerfil.add(jPerfil);

        jMenuOpcion.add(jMiPerfil);

        jVerCitas.setText("Ver Citas Agendas");
        jVerCitas.setFont(new java.awt.Font("Copperplate Gothic Light", 0, 12)); // NOI18N

        jCitasVistas.setText("Citas");
        jCitasVistas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCitasVistasActionPerformed(evt);
            }
        });
        jVerCitas.add(jCitasVistas);

        jMenuOpcion.add(jVerCitas);

        jPortafolio.setText("mi portafolio");
        jPortafolio.setFont(new java.awt.Font("Copperplate Gothic Light", 0, 12)); // NOI18N
        jPortafolio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jPortafolioActionPerformed(evt);
            }
        });

        jPortafolioFoto.setText("portafolio de imagenes.");
        jPortafolioFoto.setFont(new java.awt.Font("Copperplate Gothic Light", 0, 12)); // NOI18N
        jPortafolioFoto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jPortafolioFotoActionPerformed(evt);
            }
        });

        Jportafolio.setFont(new java.awt.Font("Copperplate Gothic Light", 0, 12)); // NOI18N
        Jportafolio.setText("Galeria de Fotos");
        Jportafolio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JportafolioActionPerformed(evt);
            }
        });
        jPortafolioFoto.add(Jportafolio);

        jPortafolio.add(jPortafolioFoto);

        jMenuOpcion.add(jPortafolio);

        jSalir.setText("salir");
        jSalir.setFont(new java.awt.Font("Copperplate Gothic Light", 0, 12)); // NOI18N
        jSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jSalirActionPerformed(evt);
            }
        });

        jCerrar.setText("salir");
        jCerrar.setFont(new java.awt.Font("Copperplate Gothic Light", 0, 12)); // NOI18N
        jCerrar.setHideActionText(true);
        jCerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCerrarActionPerformed(evt);
            }
        });

        Jcerrar.setFont(new java.awt.Font("Copperplate Gothic Light", 0, 12)); // NOI18N
        Jcerrar.setText("Salir");
        Jcerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JcerrarActionPerformed(evt);
            }
        });
        jCerrar.add(Jcerrar);

        jSalir.add(jCerrar);

        jMenuOpcion.add(jSalir);

        jAyuda.setText("ayuda");
        jAyuda.setFont(new java.awt.Font("Copperplate Gothic Light", 0, 12)); // NOI18N

        jAcercaDe.setText("acerca de...");
        jAcercaDe.setFont(new java.awt.Font("Copperplate Gothic Light", 0, 12)); // NOI18N
        jAcercaDe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jAcercaDeActionPerformed(evt);
            }
        });

        JacercaDe.setText("Acerca De");
        JacercaDe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JacercaDeActionPerformed(evt);
            }
        });
        jAcercaDe.add(JacercaDe);

        jAyuda.add(jAcercaDe);

        jMenuOpcion.add(jAyuda);

        setJMenuBar(jMenuOpcion);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void JBguardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JBguardarActionPerformed
    if (!validarCampos()) return;

    String nombreBarberia = JLtitulo.getText().trim();
    
    // Guardar nombre de barber√≠a
    if (!BarberoDAO.actualizarNombreBarberia(emailUsuario, nombreBarberia)) {
        JOptionPane.showMessageDialog(this, "Error al guardar nombre de barber√≠a.");
        return;
    }

    // Guardar disponibilidad
    guardarDisponibilidad();

    // Guardar estilo si est√° seleccionado
    String estilo = (String) JComboEstilosdisp.getSelectedItem();
    if (estilo != null && !estilo.equals("Agregar estilos...")) {
        if (!BarberoDAO.actualizarEspecialidades(emailUsuario, estilo)) {
            JOptionPane.showMessageDialog(this, "Error al guardar especialidad.");
        }
    }

    JOptionPane.showMessageDialog(this, "Datos guardados correctamente.");
    }//GEN-LAST:event_JBguardarActionPerformed

    private void JComboEstilosdispActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JComboEstilosdispActionPerformed
        mostrarInformacionEstilo();
    }//GEN-LAST:event_JComboEstilosdispActionPerformed

    private void chkLunesAViernesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkLunesAViernesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chkLunesAViernesActionPerformed

    private void chkFinSemanaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkFinSemanaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chkFinSemanaActionPerformed

    private void chkAMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkAMActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chkAMActionPerformed

    private void chkPMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkPMActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chkPMActionPerformed

    private void jMiPerfilActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMiPerfilActionPerformed
        
    }//GEN-LAST:event_jMiPerfilActionPerformed

    private void jPortafolioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jPortafolioActionPerformed
          
    }//GEN-LAST:event_jPortafolioActionPerformed

    private void jSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jSalirActionPerformed
        
    }//GEN-LAST:event_jSalirActionPerformed

    private void jPerfilActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jPerfilActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_jPerfilActionPerformed

    private void jPortafolioFotoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jPortafolioFotoActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_jPortafolioFotoActionPerformed

    private void jCerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCerrarActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_jCerrarActionPerformed

    private void jAcercaDeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jAcercaDeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jAcercaDeActionPerformed

    private void JperfilActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JperfilActionPerformed
        // TODO add your handling code here:
        this.dispose();
        new PerfilBarbero(emailUsuario).setVisible(true);
    }//GEN-LAST:event_JperfilActionPerformed

    private void JportafolioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JportafolioActionPerformed
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(this, "Proximamente..."); 
    }//GEN-LAST:event_JportafolioActionPerformed

    private void JcerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JcerrarActionPerformed
        // TODO add your handling code here:
        thebarbershop.utilidades.CerrarSesion.mostrarOpcionesSalida(this);
    }//GEN-LAST:event_JcerrarActionPerformed

    private void JacercaDeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JacercaDeActionPerformed
        // Configuraci√≥n de la ventana AcercaDe
    AcercaDe acercaDe = new AcercaDe(this);
    
    // Asegurar que se cierre al perder el foco
    acercaDe.addWindowFocusListener(new java.awt.event.WindowAdapter() {
        @Override
        public void windowLostFocus(java.awt.event.WindowEvent evt) {
            acercaDe.dispose();
        }
    });
    
    // Mostrar centrada respecto a la ventana principal
    acercaDe.setLocationRelativeTo(this);
    acercaDe.setVisible(true);
    }//GEN-LAST:event_JacercaDeActionPerformed

    private void jCitasVistasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCitasVistasActionPerformed
        // TODO add your handling code here:
        this.dispose();
        new CitasBarbero(emailUsuario).setVisible(true);
    }//GEN-LAST:event_jCitasVistasActionPerformed
    
    private void cargarDatosIniciales() {
    Barbero barbero = BarberoDAO.obtenerBarberoPorEmail(emailUsuario);
    if (barbero != null) {
        JLtitulo.setText(barbero.getNombreBarberia());
        cargarEstilosDisponibles();
        cargarHorariosDisponibles();
        mostrarResumenActividad();
        
        // Ocultar inicialmente el panel de descripci√≥n
        jScrollPane1.setVisible(false);
    } else {
        JOptionPane.showMessageDialog(this, "No se encontraron datos del barbero.", "Error", JOptionPane.ERROR_MESSAGE);
    }
    }

    private void cargarEstilosDisponibles() {
    // Primero, insertar los estilos predeterminados en la base de datos si no existen
    insertarEstilosPredeterminados();
    
    JComboEstilosdisp.removeAllItems();
    JComboEstilosdisp.addItem("Agregar estilos...");
    
    // Cargar estilos de la base de datos
    for (EstiloCorteDAO.Estilo estilo : EstiloCorteDAO.obtenerEstilos()) {
        JComboEstilosdisp.addItem(estilo.nombre);
    }
}
    
    private void insertarEstilosPredeterminados() {
    // Verificar si los estilos predeterminados ya existen, si no, insertarlos
    String[] estilosPredeterminados = {"Taper Fade", "Low Fade", "Mid Fade", "High Fade", "Skin Fade"};
    String[] descripciones = {
        "Corte degradado que comienza muy corto en los lados y se va alargando hacia arriba, creando una transici√≥n suave y moderna.",
        "Degradado bajo que comienza cerca de las orejas y se desvanece suavemente hacia arriba, manteniendo longitud en la parte superior.",
        "Degradado medio que comienza a la mitad del costado de la cabeza, ofreciendo un equilibrio perfecto entre sutil y llamativo.",
        "Degradado alto que comienza cerca de la parte superior de la cabeza, creando un contraste marcado y un look m√°s atrevido.",
        "Degradado muy corto que llega casi al ras de la piel, proporcionando el mayor contraste y un acabado ultramoderno."
    };
    double[] precios = {650.00, 600.00, 700.00, 750.00, 800.00};
    
    for (int i = 0; i < estilosPredeterminados.length; i++) {
        EstiloCorteDAO.Estilo existente = EstiloCorteDAO.obtenerEstiloPorNombre(estilosPredeterminados[i]);
        if (existente == null) {
            EstiloCorteDAO.guardarNuevoEstilo(estilosPredeterminados[i], descripciones[i], precios[i], 75);
        }
    }
}
    
    private void mostrarInformacionEstilo() {
    String seleccion = (String) JComboEstilosdisp.getSelectedItem();
    
    if (seleccion == null || seleccion.equals("Agregar estilos...")) {
        // Ocultar el panel si no hay selecci√≥n v√°lida
        jScrollPane1.setVisible(false);
        jTPdescripcion.setText("");
        return;
    }
    
    // Obtener informaci√≥n completa del estilo desde la base de datos
    EstiloCorteDAO.Estilo estilo = EstiloCorteDAO.obtenerEstiloPorNombre(seleccion);
    
    if (estilo != null) {
        // Formatear la informaci√≥n para mostrar
        String info = "Descripci√≥n:\n" + estilo.descripcion + "\n\n" +
                      "Precio: RD$" + String.format("%.2f", estilo.precio) + "\n\n" +
                      "Tiempo estimado: 1 hora 15 minutos";
        
        jTPdescripcion.setText(info);
        jScrollPane1.setVisible(true);
    } else {
        jScrollPane1.setVisible(false);
        jTPdescripcion.setText("");
    }
}
            
    private void cargarHorariosDisponibles() {
        int idPeluquero = BarberoDAO.obtenerIdPeluquero(emailUsuario);
        if (idPeluquero == 0) return;

        JcomboHorarios.removeAllItems();
        JcomboHorarios.addItem("Agregue horarios...");
        JcomboHorarios.addItem("08:00 - 09:00");
        JcomboHorarios.addItem("09:00 - 10:00");
        JcomboHorarios.addItem("10:00 - 11:00");
        JcomboHorarios.addItem("11:00 - 12:00");
        JcomboHorarios.addItem("14:00 - 15:00");
        JcomboHorarios.addItem("16:00 - 17:00");
        JcomboHorarios.addItem("18:00 - 19:00");
        
        // Obtener nombre del barbero
    Barbero barbero = BarberoDAO.obtenerBarberoPorEmail(emailUsuario);
    if (barbero == null) return;
    
    // Obtener horarios sin d√≠a espec√≠fico
    List<String> horarios = DisponibilidadDAO.obtenerHorariosDisponibles(
        idPeluquero, 
        barbero.getNombre(),  // Nombre del barbero
        null                  // Sin d√≠a espec√≠fico
    );
    
    for (String horario : horarios) {
        JcomboHorarios.addItem(horario);
    }
    }

    private void mostrarResumenActividad() {
        int idPeluquero = BarberoDAO.obtenerIdPeluquero(emailUsuario);
        ResumenDAO.Resumen resumen = ResumenDAO.obtenerResumen(idPeluquero);

        JTextArea area = new JTextArea();
        area.setText("Total de citas realizadas: " + resumen.totalCitas + "\n" +
                    "Ingresos totales: $" + String.format("%.2f", resumen.totalIngresos));
        area.setEditable(false);
        JSPresumenActividad.setViewportView(area);
    }

    private boolean validarCampos() {
        if (JLtitulo.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Nombre de barber√≠a es obligatorio.");
            return false;
        }
        return true;
    }
    
    private void guardarDisponibilidad() {
        int idPeluquero = BarberoDAO.obtenerIdPeluquero(emailUsuario);
        if (idPeluquero == 0) {
            JOptionPane.showMessageDialog(this, "No se pudo identificar al peluquero.");
            return;
        }

        // Validar selecci√≥n m√≠nima
        if (!chkLunesAViernes.isSelected() && !chkFinSemana.isSelected()) {
            JOptionPane.showMessageDialog(this, "Debe seleccionar al menos un rango de d√≠as.");
            return;
        }

        if (!chkAM.isSelected() && !chkPM.isSelected()) {
            JOptionPane.showMessageDialog(this, "Debe seleccionar al menos un turno (AM/PM).");
            return;
        }

        // Obtener horario seleccionado del ComboBox
        String horario = (String) JcomboHorarios.getSelectedItem();
        if (horario == null || horario.equals("Agregue horarios...")) {
            JOptionPane.showMessageDialog(this, "Seleccione un horario v√°lido.");
            return;
        }

        // Procesar rangos horarios
        String[] partesHorario = horario.split(" - ");
        String horaInicioBase = partesHorario[0];
        String horaFinBase = partesHorario[1];

        // Lista de d√≠as a procesar
        List<String> dias = new ArrayList<>();

        if (chkLunesAViernes.isSelected()) {
            dias.addAll(Arrays.asList("LUNES", "MARTES", "MIERCOLES", "JUEVES", "VIERNES"));
        }
        if (chkFinSemana.isSelected()) {
            dias.addAll(Arrays.asList("SABADOS", "DOMINGO"));
        }

        // Procesar turnos (AM/PM)
        List<String> turnos = new ArrayList<>();
        if (chkAM.isSelected()) turnos.add("AM");
        if (chkPM.isSelected()) turnos.add("PM");

        // Eliminar disponibilidad existente
        DisponibilidadDAO.eliminarHorarios(idPeluquero);

        // Guardar cada combinaci√≥n d√≠a/turno
        for (String dia : dias) {
            for (String turno : turnos) {
                String horaInicio = DisponibilidadDAO.ajustarHoraParaTurno(horaInicioBase, turno);
                String horaFin = DisponibilidadDAO.ajustarHoraParaTurno(horaFinBase, turno);

                if (!DisponibilidadDAO.agregarHorario(idPeluquero, dia, horaInicio, horaFin)) {
                    JOptionPane.showMessageDialog(this, "Error al guardar disponibilidad para " + dia);
                }
            }
        }
    }
    
    /**
     * @param args the command line arguments
     */
    
    /*ha sido comentado debido a cambios implementados por Ana. se ha querido dar la bienvenida a los usuarios y debido a conflictos con la variable emailUsuario, ha 
    **optado por comentar los main, un poco mas de investigacion de su parte le ha revelado que no todos lo frame deben llevar main, si no el frame principal que en este caso seria
    ** el iniciar sesion y que los frame que deben pasar por el no deberian llevar main*/
    
    /*public static void main(String args[]) {
        
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MenuBarbero().setVisible(true);
            }
        });
    }*/
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel IconBarber2;
    private javax.swing.JButton JBguardar;
    private javax.swing.JComboBox<String> JComboEstilosdisp;
    private javax.swing.JLabel JLestilosdisp;
    private javax.swing.JLabel JLfondo;
    private javax.swing.JLabel JLhorarios;
    private javax.swing.JLabel JLresumendeactividad;
    private javax.swing.JLabel JLtitulo;
    private javax.swing.JScrollPane JSPresumenActividad;
    private javax.swing.JMenuItem JacercaDe;
    private javax.swing.JMenuItem Jcerrar;
    private javax.swing.JComboBox<String> JcomboHorarios;
    private javax.swing.JMenuItem Jperfil;
    private javax.swing.JMenuItem Jportafolio;
    private javax.swing.JCheckBox chkAM;
    private javax.swing.JCheckBox chkFinSemana;
    private javax.swing.JCheckBox chkLunesAViernes;
    private javax.swing.JCheckBox chkPM;
    private javax.swing.JLabel iconBarber;
    private javax.swing.JMenu jAcercaDe;
    private javax.swing.JMenu jAyuda;
    private javax.swing.JMenu jCerrar;
    private javax.swing.JMenuItem jCitasVistas;
    private javax.swing.JMenuBar jMenuOpcion;
    private javax.swing.JMenu jMiPerfil;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JMenu jPerfil;
    private javax.swing.JMenu jPortafolio;
    private javax.swing.JMenu jPortafolioFoto;
    private javax.swing.JMenu jSalir;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextPane jTPdescripcion;
    private javax.swing.JMenu jVerCitas;
    // End of variables declaration//GEN-END:variables
}
